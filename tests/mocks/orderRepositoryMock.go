// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gofermart/storage/repository/orderRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "beliaev-aa/yp-gofermart/internal/gofermart/domain"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
	reflect "reflect"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderRepository) AddOrder(tx *gorm.DB, order domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", tx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderRepositoryMockRecorder) AddOrder(tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderRepository)(nil).AddOrder), tx, order)
}

// BeginTransaction mocks base method.
func (m *MockOrderRepository) BeginTransaction() (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockOrderRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockOrderRepository)(nil).BeginTransaction))
}

// Commit mocks base method.
func (m *MockOrderRepository) Commit(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockOrderRepositoryMockRecorder) Commit(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockOrderRepository)(nil).Commit), tx)
}

// GetOrderByNumber mocks base method.
func (m *MockOrderRepository) GetOrderByNumber(tx *gorm.DB, number string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", tx, number)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockOrderRepositoryMockRecorder) GetOrderByNumber(tx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByNumber), tx, number)
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderRepository) GetOrdersByUserID(tx *gorm.DB, userID int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", tx, userID)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByUserID(tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByUserID), tx, userID)
}

// GetOrdersForProcessing mocks base method.
func (m *MockOrderRepository) GetOrdersForProcessing(tx *gorm.DB) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForProcessing", tx)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForProcessing indicates an expected call of GetOrdersForProcessing.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersForProcessing(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForProcessing", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersForProcessing), tx)
}

// LockOrderForProcessing mocks base method.
func (m *MockOrderRepository) LockOrderForProcessing(tx *gorm.DB, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockOrderForProcessing", tx, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockOrderForProcessing indicates an expected call of LockOrderForProcessing.
func (mr *MockOrderRepositoryMockRecorder) LockOrderForProcessing(tx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockOrderForProcessing", reflect.TypeOf((*MockOrderRepository)(nil).LockOrderForProcessing), tx, orderNumber)
}

// Rollback mocks base method.
func (m *MockOrderRepository) Rollback(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockOrderRepositoryMockRecorder) Rollback(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockOrderRepository)(nil).Rollback), tx)
}

// UnlockOrder mocks base method.
func (m *MockOrderRepository) UnlockOrder(tx *gorm.DB, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockOrder", tx, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockOrder indicates an expected call of UnlockOrder.
func (mr *MockOrderRepositoryMockRecorder) UnlockOrder(tx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockOrder", reflect.TypeOf((*MockOrderRepository)(nil).UnlockOrder), tx, orderNumber)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepository) UpdateOrder(tx *gorm.DB, order domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", tx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrder(tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrder), tx, order)
}
