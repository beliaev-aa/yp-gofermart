// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gofermart/storage/repository/withdrawalRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "beliaev-aa/yp-gofermart/internal/gofermart/domain"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
	reflect "reflect"
)

// MockWithdrawalRepository is a mock of WithdrawalRepository interface.
type MockWithdrawalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalRepositoryMockRecorder
}

// MockWithdrawalRepositoryMockRecorder is the mock recorder for MockWithdrawalRepository.
type MockWithdrawalRepositoryMockRecorder struct {
	mock *MockWithdrawalRepository
}

// NewMockWithdrawalRepository creates a new mock instance.
func NewMockWithdrawalRepository(ctrl *gomock.Controller) *MockWithdrawalRepository {
	mock := &MockWithdrawalRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalRepository) EXPECT() *MockWithdrawalRepositoryMockRecorder {
	return m.recorder
}

// AddWithdrawal mocks base method.
func (m *MockWithdrawalRepository) AddWithdrawal(tx *gorm.DB, withdrawal domain.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawal", tx, withdrawal)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawal indicates an expected call of AddWithdrawal.
func (mr *MockWithdrawalRepositoryMockRecorder) AddWithdrawal(tx, withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawal", reflect.TypeOf((*MockWithdrawalRepository)(nil).AddWithdrawal), tx, withdrawal)
}

// BeginTransaction mocks base method.
func (m *MockWithdrawalRepository) BeginTransaction() (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockWithdrawalRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockWithdrawalRepository)(nil).BeginTransaction))
}

// Commit mocks base method.
func (m *MockWithdrawalRepository) Commit(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockWithdrawalRepositoryMockRecorder) Commit(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockWithdrawalRepository)(nil).Commit), tx)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockWithdrawalRepository) GetWithdrawalsByUserID(tx *gorm.DB, userID int) ([]domain.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", tx, userID)
	ret0, _ := ret[0].([]domain.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockWithdrawalRepositoryMockRecorder) GetWithdrawalsByUserID(tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockWithdrawalRepository)(nil).GetWithdrawalsByUserID), tx, userID)
}

// Rollback mocks base method.
func (m *MockWithdrawalRepository) Rollback(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockWithdrawalRepositoryMockRecorder) Rollback(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockWithdrawalRepository)(nil).Rollback), tx)
}
